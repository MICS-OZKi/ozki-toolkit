import  ProofVerifier from "ozki-toolkit";
import  { ProofRequiredOutput } from "ozki-toolkit";

const EXPECTED_HASH: Array<bigint> = [ // hash for "7777"
    17969822078950443396304190226600572605315170016132877252634433633878427351427n,
    5833892415048974067166189971140145590650627648960218662172368633189425646640n,
    5967963772386045218506869054727965241992608819846452057254526725522086435076n,
    15865507937624585812332896054966970299300541708018720935430884805393391731046n,
    14800447991671478488423183228330468600040146786114978533647624222424255118846n,
    4555400819555497095744145659710770317267046469537525877075333215104333097772n,
    6923691736630187665967886858626735334211714594574683671605571174812526584601n,
    18588514370511591475787713012530228798687461725928264957713150208128089408537n,
    14540457672271251229400341801538581200270842468828396501855908627926885442376n,
    13526964773127548885804875099844525517561629643395695786130846471203812686760n,
    16266536440406794223850321691727415899131279563611260306729005916979964522224n,
    8946508247619880031084782043024231190672539211062160137179162166605789393544n,
    4845484043189458357358008919065532913484381304998811671769494813425010680283n,
    6757124677739553257900675036609409542651504630917519248269921541123043212941n,
    10062144234904162547239383990076317121571880883029673384389291164060646603830n,
    2180692738011890508700068131547173453986914448058829651561671521489890267927n,
    2639041817614415796069582877012952884935380762644480013178161655360361085578n,
    19219403442551388588632494754323967248703480143017634564019189006036018476908n,
    7701314018894839208215638071531920812713527793061678502546711157713609569560n,
    11958797847725223737243107112823691692054477393190401035564569066651183713183n,
    10810562580464726221630615000603929278665859737969604001901244901697559739355n,
    1146286738303251267679864121836399390455516623024268016213549727996843197880n,
    3629464197118359627074821529400014241116133585463972336986723189077203826123n,
    19895329713580790515773435837955380882325215227868770369640943968957493016573n,
    9602541208464704499711824563334869452463421087079190336039492385573012781121n,
    6179011320114793987292865159783271387913238645300542822657759938235569092001n,
    18543839830852901243187391865544674262134487172286099784456479164092701306077n,
    20722504321505370561402559659556819569579299456141029192018116675607542387099n,
    18069402510266542426114284493704104316984199957968218172953531968953549304696n,
    16698314952705825467891532032852787528402097216585707291084895629742136228497n,
    21303390023103914984673237964731281580945143874554204516377966160306520357273n,
    270873290931221740238487929440710969190603788331434000100742442378661720611n,
    14449305977971311847222318046311028158966290669110192207895187537388182350174n,
    3204170992697747551855797436372564686094780048487102853681514762433674136n,
    11618421640805154918600626065277018402522310224473913433092481565323747985417n,
    18769559438225982110334357149661680004991768676343403433699994558356042489759n,
    21299980792657275263826897957983201396846721642472035893652720057206350560342n,
    12494461879087873271931589501191157660503872589864292336054391747668081795215n,
    9652516845853201057747762242531623671911692495180305397509660910702461156892n,
    4308688820131122927907011093480237143047327861209502761616643294307672219265n,
    15119487683295221595681920994322657584049385187632687944306162539343487910623n,
    21602356916407606540114930269334337138692853705645864876311538352519366801895n,
    11256954682910872706033735827463978655446222525940901124181551172553526146812n,
    13670044543273753531368153822379908610188072371529950040789851747420688833742n,
    10014398298788923856098882211694572486747273765687501415063147536028318935655n,
    16796080658222641925222413704890578876595706358393565388605713976063917086314n,
    19663683831089175314261341448794470865592264261240882311742611423808588814448n,
    18460405163805389405751016403766767021395111545278799259511851722084774661328n,
    12932718677690428766298465140474939493238407626414243930369991559595478595048n,
    7142274855073965051916761415646265206315503610991517580027938494494734751273n,
    14782983193876022571182712031432205124695114139118292266326524838034373185813n,
    4896552233722898086170308274775797368687651121521924466309942229319000021624n,
    2798861720851170632199353882612826742332145938011030491165168532140969491146n,
    17664175744050822200080377808259053984217553667575128218584613133322718339261n,
    190218278008412491303019931334045602029396728129501798991449545194934395515n,
    4763737186261576945311897819514712154752863779363905757362113402989359068017n,
    14070972122779739842536244995779606187100119591489865912929471807275790680227n,
    16017525259519058507860112234840530333465019281040827878070414093171047521358n,
    19398888367873284440970110278855639527346509743625306900016040091170491082330n,
    17209030688135969766420249716965046785354113184145417510903771058605628399232n,
    2181402919323523479402414704623438246042670816049522574357619967478295914353n,
    15290555500857213747179610089771791411894574174532583693793970743295171505835n,
    4555999793887098923916992601341613929377803505316749135500550296888242786530n,
    17814656771642625274865262857878154680434210848571086589121298009779901949279n
];

export interface ParsedAnswerInfo {
    answerNo:       number;
    answerHash:     Array<bigint>
}

export class ProofOfHashVerifier extends ProofVerifier<ParsedAnswerInfo> {
    private timeStamp: number = 0;
    private number: number = 0;
    private hash: Array<bigint> = [];

    constructor(
        zkpComponentPath: string,
        zkpComponentName: string
        ) {
        console.log("#### >>ProofOfHashVerifier.ctor:");
        super(zkpComponentPath, zkpComponentName);
        console.log("#### <<ProofOfHashVerifier.ctor:");
    }

    protected parseRequiredOutput(output: Array<string>): ProofRequiredOutput {
        // the corresponding circom output signal must follow this order (name-insensitive):
        // - timeStamp
        // - constraintStatus
        this.parseOutputInternal(output);
        let status = (this.number == 1) && this.compareWithExpectedHash();
        console.log("#### parseRequiredOutput: constraint-status=%s", status);

        return {timeStamp: this.timeStamp, constraintStatus: status};
    }

    protected parseCustomOutput(output: Array<string>): ParsedAnswerInfo {
        let info : ParsedAnswerInfo = {
            answerNo: this.number,
            answerHash: this.hash
        };

        return info;
    }

    private parseOutputInternal(publicSignals: any) {
        this.timeStamp  = Number.parseInt(publicSignals[0]);
        this.number = Number.parseInt(publicSignals[1]);

        for (let i = 0; i < (publicSignals.length - 2); i++)
            this.hash.push(BigInt(publicSignals[2 + i]));
    }

    private compareWithExpectedHash(): boolean {
        let status = true;
        if (this.hash.length == EXPECTED_HASH.length) {
            for (let i = 0; i < this.hash.length; i++) {
                if (this.hash[i] != EXPECTED_HASH[i]) {
                    status = false;
                    break;
                }
            }
        }
        else {
            status = false;
        }

        return status;
    }
}